#
# Chart:
# https://github.com/grafana/helm-charts
#
# Values:
# https://github.com/grafana/helm-charts/blob/main/charts/grafana/values.yaml
#
#
replicas: 1

env:
  GF_DATE_FORMATS_USE_BROWSER_LOCALE: true
  GF_EXPLORE_ENABLED: true
  GF_FEATURE_TOGGLES_ENABLE: publicDashboards
  GF_SECURITY_COOKIE_SAMESITE: grafana
  GF_SERVER_ROOT_URL: http://grafana.local.dev
  GF_LOG_LEVEL: debug
  GF_LOG.CONSOLE_LEVEL: debug
  # Existing settings for data paths
  GF_PATHS_DATA: /var/lib/grafana/data
  GF_PATHS_LOGS: /var/log/grafana
  GF_PATHS_PLUGINS: /var/lib/grafana/plugins
  GF_PATHS_PROVISIONING: /etc/grafana/provisioning
  # Add this for database recovery
  GF_DATABASE_WAL: "true"

adminUser: admin
adminPassword: grafana

grafana.ini:
  analytics:
    check_for_updates: false
    check_for_plugin_updates: false
    reporting_enabled: false
  auth.basic:
    enabled: true
  auth.anonymous:
    enabled: false
  news:
    news_feed_enabled: false
  # Existing settings for paths
  paths:
    data: /var/lib/grafana/data
    logs: /var/log/grafana
    plugins: /var/lib/grafana/plugins
    provisioning: /etc/grafana/provisioning
  server:
    http_port: 3000
  # Important for preventing database corruption
  database:
    wal: true

dashboardProviders:
  dashboardproviders.yaml:
    apiVersion: 1
    providers:
      #
      - name: default
        orgId: 1
        folder: ""
        type: file
        disableDeletion: false
        editable: true
        options:
          path: /var/lib/grafana/dashboards/default

datasources:
  datasources.yaml:
    apiVersion: 1

    #
    deleteDatasources:
      - { name: Alertmanager, orgId: 1 }
      - { name: Loki, orgId: 1 }
      - { name: Prometheus, orgId: 1 }

dashboards:
  default:
    node-exporter-full:
      gnetId: 1860
      revision: 36
      datasource: Prometheus

sidecar:
  dashboards:
    enabled: true
    searchNamespace: ALL
    labelValue: ""
    label: grafana_dashboard
    folderAnnotation: grafana_folder
    provider:
      disableDelete: true
      foldersFromFilesStructure: true
  #
  datasources:
    enabled: true
    searchNamespace: ALL
    labelValue: ""

serviceMonitor:
  enabled: false

ingress:
  enabled: false

# FIXED: Enable persistence properly
persistence:
  enabled: true  # Changed from false to true
  storageClassName: standard
  accessModes:
    - ReadWriteOnce
  size: 1Gi
  # Add annotation to prevent deletion during upgrades
  annotations:
    "helm.sh/resource-policy": keep

# FIXED: Proper init container configuration for Grafana Helm chart
initChownData:
  enabled: true
  ## If false, data ownership will not be reset at startup
  ## This allows the grafana-server to be run with an arbitrary user
  ##
  ## If you are using an initContainer to change the GID or UID of an existing volume, set this to false
  ## If you are using an initContainer to populate an empty dir as the volume, set this to false
  ## Related issue: https://github.com/grafana/grafana-docker/issues/43
  ##
  image:
    repository: busybox
    tag: "1.34"
    sha: ""
    pullPolicy: IfNotPresent
  ## initChownData resource requests and limits
  ## Ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources: {}
  securityContext:
    runAsNonRoot: false
    runAsUser: 0
    securityContext:
      runAsUser: 0

# FIXED: Proper security context configuration
securityContext:
  runAsNonRoot: false
  runAsUser: 0
  runAsGroup: 0
  fsGroup: 472

podSecurityContext:
  runAsNonRoot: false
  runAsUser: 0
  runAsGroup: 0
  fsGroup: 472
  fsGroupChangePolicy: "OnRootMismatch"

# Keep your existing resource limits
resources:
  limits:
    cpu: 200m
    memory: 256Mi
  requests:
    cpu: 100m
    memory: 128Mi

# FIXED: Improved probe configuration
readinessProbe:
  httpGet:
    path: /api/health
    port: 3000
  initialDelaySeconds: 10
  timeoutSeconds: 30
  periodSeconds: 10
  successThreshold: 1
  failureThreshold: 3

livenessProbe:
  httpGet:
    path: /api/health
    port: 3000
  initialDelaySeconds: 30
  timeoutSeconds: 30
  periodSeconds: 10
  successThreshold: 1
  failureThreshold: 3

startupProbe:
  httpGet:
    path: /api/health
    port: 3000
  initialDelaySeconds: 10
  timeoutSeconds: 30
  periodSeconds: 5
  successThreshold: 1
  failureThreshold: 15

# Extended grace period
terminationGracePeriodSeconds: 60

testFramework:
  enabled: false